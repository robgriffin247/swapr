library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- resp_json$results
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("people")
sapply(x, class)
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- data.table(resp_json$results)
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("people")
sapply(x, class)
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- t(resp_json$results)
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("people")
sapply(x, class)
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- lapply(resp_json$results, t)
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("people")
sapply(x, class)
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- lapply(resp_json$results, t)
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- lapply(lapply(resp_json$results, t), data.table)
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- lapply(lapply(resp_json$results, t), data.table)
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
x
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- lapply(resp_json$results, t)
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
x
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- data.table(resp_json$results)
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
x
dt <- data.table(lapply(resp_json$results,t))
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- data.table(lapply(resp_json$results,t))
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
x
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- data.table(lapply(resp_json$results,t)[[1]])
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
x
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
## problem here; all columns becoming lists
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
dt <- data.table(lapply(resp_json$results,t)[[1]])
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
x
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
## problem here; all columns becoming lists
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
dt <- resp_json$results
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
x
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
## problem here; all columns becoming lists
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
dt <- resp_json$results
dt <- lapply(dt, is.list)
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
x
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
## problem here; all columns becoming lists
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
dt <- resp_json$results
dt <- lapply(lapply(dt, is.list), function(x){x})
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
x
films <- count_ducku("select * from stg_films")
setwd("~/git_personal/swapr/")
source("functions/count_ducku.R")
films <- count_ducku("select * from stg_films")
count_ducku("SHOW TABLES")
sapply(1:3, function(i){
assign(letters[i], i)
})
a
setwd("~/git_personal/swapr/")
source("functions/count_ducku.R")
films <- count_ducku("select * from stg_films")
characters <- count_ducku("select * from stg_characters")
planets <- count_ducku("select * from stg_planets")
for(i in 1:3){
assign(letters[i], i)
}
count_ducku("show tables")
count_ducku("show tables")[, name]
for(r in count_ducku("show tables")){
assign(r, count_ducku(paste0("select * from ", r)))
}
setwd("~/git_personal/swapr/")
source("functions/count_ducku.R")
films <- count_ducku("select * from stg_films")
characters <- count_ducku("select * from stg_characters")
planets <- count_ducku("select * from stg_planets")
for(r in count_ducku("show tables")){
assign(r, count_ducku(paste0("select * from ", r)))
}
setwd("~/git_personal/swapr/")
source("functions/count_ducku.R")
films <- count_ducku("select * from stg_films")
characters <- count_ducku("select * from stg_characters")
planets <- count_ducku("select * from stg_planets")
for(r in count_ducku("show tables")[, name]){
assign(r, count_ducku(paste0("select * from ", r)))
}
setwd("~/git_personal/swapr/")
source("functions/count_ducku.R")
films <- count_ducku("select * from stg_films")
films
setnames(films, c("title"), "film")
films
films[, .(url, title, episode_id, director, producer, release_date)]
films[, .(url, title, episode_id, director, producer, release_date)]
setwd("~/git_personal/swapr/")
source("functions/count_ducku.R")
films <- count_ducku("select * from stg_films")
films[, .(url, title, episode_id, director, producer, release_date)]
setwd("~/git_personal/swapr/")
source("functions/count_ducku.R")
films <- count_ducku("select * from stg_films")
films <- films[, .("id"=url, "film"=title, "episode"=episode_id, director, "producers"=producer, release_date)]
setwd("~/git_personal/swapr/")
source("functions/count_ducku.R")
films <- count_ducku("select * from stg_films")[
, .("id"=url, "film"=title, "episode"=episode_id, director, "producers"=producer, release_date)]
films
tstrsplit(films[, producers], ",")
setwd("~/git_personal/swapr/")
source("functions/count_ducku.R")
films <- count_ducku("select * from stg_films")[
, .("id"=url, "film"=title, "episode"=episode_id, director, "producers"=producer, release_date)]
tstrsplit(films[, producers], ", ")
unlist(tstrsplit(films[, producers], ", "))
unlist(strsplit(films[, producers], ", "))
table(unlist(strsplit(films[, producers], ", ")))
setwd("~/git_personal/swapr/")
source("functions/count_ducku.R")
films <- count_ducku("select * from stg_films")[
, .("id"=url, "film"=title, "episode"=episode_id, director, "producers"=producer, release_date)]
films
str(films)
films <- count_ducku("select * from stg_films")[
, .("id"=url, "film"=title, "episode"=episode_id, director, "producers"=producer, "release_date"=as.Date(release_date))]
str(films)
int_films <- count_ducku("select * from stg_films")[
, .("id"=url,
"film"=title,
"episode"=episode_id,
director,
"producers"=producer,
"release_date"=as.Date(release_date))]
r2db(
count_ducku("select * from stg_films")[
, .("id"=url,
"film"=title,
"episode"=episode_id,
director,
"producers"=producer,
"release_date"=as.Date(release_date))],
"int_films",
"intermediate"
)
source("functions/r2db")
source("functions/r2db.R")
setwd("~/git_personal/swapr/")
source("functions/r2db.R")
source("functions/count_ducku.R")
int_films <- count_ducku("select * from stg_films")[
, .("id"=url,
"film"=title,
"episode"=episode_id,
director,
"producers"=producer,
"release_date"=as.Date(release_date))]
r2db(
count_ducku("select * from stg_films")[
, .("id"=url,
"film"=title,
"episode"=episode_id,
director,
"producers"=producer,
"release_date"=as.Date(release_date))],
"int_films",
"intermediate"
)
count_ducku("select * from int_films")
setwd("~/git_personal/swapr/")
source("functions/r2db.R")
source("functions/count_ducku.R")
r2db(
count_ducku("select * from stg_films")[
, .("id"=url,
"film"=title,
"episode"=episode_id,
director,
"producers"=producer,
"release_date"=as.Date(release_date))],
"int_films",
"intermediate"
)
count_ducku("SHOW TABLES")
count_ducku("SHOW SCHEMA")
count_ducku("LIST SCHEMA")
count_ducku("SELECT SCHEMA")
View(r2db)
