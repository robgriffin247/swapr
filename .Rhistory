# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("people")
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
print(rbindlist(lapply(lapply(resp_json$results, t), data.table)))
dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("people")
sapply(x, class)
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
resp_json$results
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("people")
sapply(x, class)
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- resp_json$results
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("people")
sapply(x, class)
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- data.table(resp_json$results)
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("people")
sapply(x, class)
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- t(resp_json$results)
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("people")
sapply(x, class)
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- lapply(resp_json$results, t)
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("people")
sapply(x, class)
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- lapply(resp_json$results, t)
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- lapply(lapply(resp_json$results, t), data.table)
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- lapply(lapply(resp_json$results, t), data.table)
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
x
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- lapply(resp_json$results, t)
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
x
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- data.table(resp_json$results)
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
x
dt <- data.table(lapply(resp_json$results,t))
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- data.table(lapply(resp_json$results,t))
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
x
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
dt <- data.table(lapply(resp_json$results,t)[[1]])
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
x
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
## problem here; all columns becoming lists
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
dt <- data.table(lapply(resp_json$results,t)[[1]])
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
x
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
## problem here; all columns becoming lists
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
dt <- resp_json$results
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
x
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
## problem here; all columns becoming lists
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
dt <- resp_json$results
dt <- lapply(dt, is.list)
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
x
library(httr2)
library(data.table)
library(duckdb)
api_wan <- function(resource){
# Get the pages of data
url <- paste0("https://swapi.dev/api/", resource)
dt <- data.table()
while(!is.null(url)){
message("Getting ", url)
resp <- req_perform(request(url))
resp_json <- resp_body_json(resp)
## problem here; all columns becoming lists
#dt <- rbind(dt, rbindlist(lapply(lapply(resp_json$results, t), data.table)))
dt <- resp_json$results
dt <- lapply(lapply(dt, is.list), function(x){x})
url <- resp_json$`next`
}
# Load to duckdb
#con <- dbConnect(duckdb(), dbdir="swapr.duckdb")
#dbExecute(con, "CREATE SCHEMA IF NOT EXISTS STAGING")
#dbWriteTable(con, paste0("STG_", toupper(resource)), dt)
#on.exit(dbDisconnect(con, shutdown = TRUE))
dt
}
x <- api_wan("films")
sapply(x, class)
x
source("function/api_wan.R")
source("function/r2db.R")
setwd("~/git_personal/swapr/")
source("function/api_wan.R")
source("function/r2db.R")
setwd("~/git_personal/swapr/")
source("functions/api_wan.R")
source("functions/r2db.R")
api_wan("people")
data <- api_wan("people")
data
data[, class(.SD)]
data[, sapply(.SD, classj)]
data[, sapply(.SD, class)]
data[, !is.list(sapply(.SD, class))]
data[, sapply(sapply(.SD, class), is.list)]
data[, sapply(.SD, class)=="list"]
data[, sapply(.SD, is.list)]
data[, sapply(.SD, !is.list)]
data[, !sapply(.SD, is.list)]
data[, names(!sapply(.SD, is.list))]
data[, .SDcols=names(!sapply(.SD, is.list))]
data[.SDcols=names(!sapply(.SD, is.list))]
data[,,.SDcols=names(!sapply(.SD, is.list))]
data[, .SD, .SDcols=names(!sapply(.SD, is.list))]
data[, .SD, SDcols=names(!sapply(.SD, is.list))]
data[, .SD, .SDcols=data[, names(!sapply(.SD, is.list))]]
data[, names(!sapply(.SD, is.list))]
data[, names(sapply(.SD, is.list))]
data[, names(!sapply(.SD, is.list))]
data[, !sapply(.SD, is.list)]
data[, .SD, .SDcols=data[, !sapply(.SD, is.list)]]
data[, .SD, .SDcols=data[, !sapply(.SD, is.list)]]
r2db(data, "people", "staging", "stg")
setwd("~/git_personal/swapr/")
source("functions/api_wan.R")
source("functions/r2db.R")
data <- api_wan("people")
r2db(data, "people", "staging", "stg")
# Demo:
setwd("~/git_personal/swapr/")
source("functions/api_wan.R")
source("functions/r2db.R")
source("functions/query_duckdb.R")
# - Get data from SWAPI
people <- api_wan("people")
starships <- api_wan("starships")
# - Store data to DuckDB database
r2db(starships, "starships", "staging", "stg")
r2db(api_wan("films"), "films", "staging", "stg")
sapply(c("films", "people", "planets", "species", "starships", "vehicles"), function(r){
r2db(api_wan(r), r, "staging", "stg")
})
films
# - return films from episodes IV to VI
films <- query_duckdb("select * from stg_films")
films[episode_id %in% 4:6]
query_duckdb("select * from stg_people")
query_duckdb("select * from stg_planets")
# - Return tables from DuckDB database
query_duckdb("show tables")
query_duckdb(paste0("select * from ", dt))
# - Create a list containing all data.tables
lapply(query_duckdb("show tables")[, name],
function(dt){
query_duckdb(paste0("select * from ", dt))
})
# - Create a list containing all data.tables
all_data <- lapply(query_duckdb("show tables")[, name],
function(dt){
query_duckdb(paste0("select * from ", dt))
})
all_data
# - Create a list containing all data.tables
all_data <- list()
for (dt in query_duckdb("show tables")[, name]){
all_data[[dt]] <- query_duckdb(paste0("select * from ", dt))
}
all_data
all_data$STG_FILMS
